#!/usr/bin/env python3
"""
LogoKraft Prompt Category Analysis Script
Demonstrates the variety of prompts generated from form information using APEX-7 system
"""

import sys
import os
# Add parent directory to path so we can import from app
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.models.schemas import BrandInfo
from app.services.prompt_engineering_service import PromptEngineeringService
import asyncio
import json
from typing import List, Dict

class PromptCategoryAnalyzer:
    """Analyzes and categorizes the types of prompts generated by APEX-7"""
    
    def __init__(self):
        self.prompt_service = PromptEngineeringService()
        
    def get_sample_brand_infos(self) -> List[Dict]:
        """Sample brand information from various industries and styles"""
        return [
            {
                "name": "TechVault",
                "industry": "Cybersecurity",
                "description": "Enterprise security solutions for Fortune 500 companies",
                "inspirations": []
            },
            {
                "name": "Solara",
                "industry": "Renewable Energy", 
                "description": "Solar panel installation and green energy consulting",
                "inspirations": []
            },
            {
                "name": "Bloom Bakery",
                "industry": "Food & Beverage",
                "description": "Artisanal pastries and organic coffee shop",
                "inspirations": []
            },
            {
                "name": "Axiom Financial",
                "industry": "Financial Services",
                "description": "Investment advisory and wealth management",
                "inspirations": []
            },
            {
                "name": "Luna Studios",
                "industry": "Creative Agency",
                "description": "Brand design and digital marketing agency",
                "inspirations": []
            }
        ]
    
    def categorize_prompt(self, prompt: str) -> Dict[str, str]:
        """Analyze a prompt and determine its category and characteristics"""
        prompt_lower = prompt.lower()
        
        # Determine studio style
        studio = "Unknown"
        if any(word in prompt_lower for word in ["octane", "photorealistic", "8k", "liquid", "glass", "chrome", "metal"]):
            studio = "Helios (Cinematic)"
        elif any(word in prompt_lower for word in ["memphis", "swiss", "graphic design", "vector", "typography", "bold"]):
            studio = "'78 (Typography)"
        elif any(word in prompt_lower for word in ["minimalist", "clean", "geometric", "negative space", "flat design"]):
            studio = "Apex (Minimal)"
        
        # Determine material focus
        materials = []
        material_keywords = {
            "liquid": "Liquid Effects",
            "chrome": "Metal Finishes", 
            "glass": "Glass/Crystal",
            "marble": "Stone/Marble",
            "carbon": "Technical Materials",
            "neon": "Light Effects",
            "gradient": "Color Transitions"
        }
        
        for keyword, material in material_keywords.items():
            if keyword in prompt_lower:
                materials.append(material)
        
        # Determine style approach
        style_approach = "Standard"
        if any(word in prompt_lower for word in ["retro", "vintage", "deco", "brutalist"]):
            style_approach = "Retro/Vintage"
        elif any(word in prompt_lower for word in ["cyberpunk", "tech", "futuristic"]):
            style_approach = "Futuristic/Tech"
        elif any(word in prompt_lower for word in ["organic", "natural", "flowing"]):
            style_approach = "Organic/Natural"
        elif any(word in prompt_lower for word in ["geometric", "mathematical", "precise"]):
            style_approach = "Geometric/Precise"
        
        return {
            "studio": studio,
            "materials": materials,
            "style_approach": style_approach,
            "length": len(prompt.split()),
            "preview": prompt[:50] + "..." if len(prompt) > 50 else prompt
        }
    
    def analyze_prompt_variety(self, brand_name: str, prompts: List[str]) -> Dict:
        """Analyze the variety and distribution of prompt types"""
        analysis = {
            "brand": brand_name,
            "total_prompts": len(prompts),
            "studios": {"Helios": 0, "'78": 0, "Apex": 0, "Unknown": 0},
            "materials_used": set(),
            "style_approaches": set(),
            "prompt_details": []
        }
        
        for i, prompt in enumerate(prompts):
            category = self.categorize_prompt(prompt)
            
            # Count studio distribution
            studio_key = category["studio"].split("(")[0].strip()
            if studio_key in analysis["studios"]:
                analysis["studios"][studio_key] += 1
            else:
                analysis["studios"]["Unknown"] += 1
            
            # Collect materials and styles
            analysis["materials_used"].update(category["materials"])
            analysis["style_approaches"].add(category["style_approach"])
            
            # Store detailed analysis
            analysis["prompt_details"].append({
                "index": i + 1,
                "studio": category["studio"],
                "materials": category["materials"],
                "style": category["style_approach"],
                "length": category["length"],
                "preview": category["preview"]
            })
        
        # Convert sets to lists for JSON serialization
        analysis["materials_used"] = list(analysis["materials_used"])
        analysis["style_approaches"] = list(analysis["style_approaches"])
        
        return analysis
    
    def print_analysis_report(self, analysis: Dict):
        """Print a formatted analysis report"""
        print(f"\n{'='*60}")
        print(f"PROMPT ANALYSIS FOR: {analysis['brand'].upper()}")
        print(f"{'='*60}")
        
        print(f"\nüìä OVERVIEW:")
        print(f"  ‚Ä¢ Total Prompts Generated: {analysis['total_prompts']}")
        
        print(f"\nüé® STUDIO DISTRIBUTION:")
        for studio, count in analysis['studios'].items():
            if count > 0:
                percentage = (count / analysis['total_prompts']) * 100
                print(f"  ‚Ä¢ {studio}: {count} prompts ({percentage:.1f}%)")
        
        print(f"\nüéØ MATERIALS/TECHNIQUES USED:")
        for material in sorted(analysis['materials_used']):
            print(f"  ‚Ä¢ {material}")
        
        print(f"\nüé® STYLE APPROACHES:")
        for style in sorted(analysis['style_approaches']):
            print(f"  ‚Ä¢ {style}")
        
        print(f"\nüìù PROMPT SAMPLES:")
        for detail in analysis['prompt_details'][:5]:  # Show first 5
            print(f"  {detail['index']}. [{detail['studio']}] {detail['preview']}")
            if detail['materials']:
                print(f"     Materials: {', '.join(detail['materials'])}")
            print()

async def main():
    """Main analysis function"""
    print("üé® LogoKraft APEX-7 Prompt Category Analysis")
    print("=" * 50)
    
    analyzer = PromptCategoryAnalyzer()
    sample_brands = analyzer.get_sample_brand_infos()
    
    print(f"\nAnalyzing prompt generation for {len(sample_brands)} different brands...")
    
    for brand_data in sample_brands:
        try:
            # Create BrandInfo object
            brand_info = BrandInfo(
                company_name=brand_data["name"],
                industry=brand_data["industry"],
                description=brand_data["description"],
                inspirations=brand_data["inspirations"]
            )
            
            print(f"\nüîÑ Generating prompts for {brand_info.company_name} ({brand_info.industry})...")
            
            # Generate prompts using APEX-7
            prompts = analyzer.prompt_service.generate_prompts(brand_info)
            
            # Analyze the generated prompts
            analysis = analyzer.analyze_prompt_variety(brand_info.company_name, prompts)
            
            # Print analysis
            analyzer.print_analysis_report(analysis)
            
        except Exception as e:
            print(f"‚ùå Error generating prompts for {brand_data['name']}: {e}")
            continue
    
    print(f"\n{'='*60}")
    print("APEX-7 SYSTEM BREAKDOWN:")
    print(f"{'='*60}")
    
    print("""
üè¢ THE 3 AI DESIGN STUDIOS:

1. üé¨ Studio "Helios" (Cinematic & Photorealistic)
   ‚Ä¢ Materials: Liquid metal, dichroic glass, carbon fiber, marble, titanium
   ‚Ä¢ Techniques: Octane render, ray tracing, studio photography
   ‚Ä¢ Keywords: "hero shot", "8K resolution", "photorealistic"

2. üé® Studio "'78" (Bold Typography & Retro Graphics) 
   ‚Ä¢ Styles: Memphis Group, Swiss International, Art Deco, Cyberpunk
   ‚Ä¢ Typography: Custom letterforms, bold geometrics, vintage scripts
   ‚Ä¢ Keywords: "graphic design", "vector illustration", "Behance"

3. ‚ö™ Studio "Apex" (Minimalist & Conceptual)
   ‚Ä¢ Concepts: Negative space, optical illusions, continuous line
   ‚Ä¢ Aesthetics: Flat design, isometric, line art, geometric abstraction
   ‚Ä¢ Keywords: "minimalist logo", "brand identity", "vector mark"

üìã GENERATION ARCHITECTURE:
   ‚Ä¢ 5 Core Brand Concepts
   ‚Ä¢ Each concept executed by 3 different studios  
   ‚Ä¢ Total: 15 unique prompts per brand
   ‚Ä¢ 40-60 words per prompt with professional terminology
   ‚Ä¢ Diverse materials, styles, and techniques
""")
    
    print("\n‚úÖ Analysis complete!")

if __name__ == "__main__":
    asyncio.run(main())